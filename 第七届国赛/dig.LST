C51 COMPILER V9.01   DIG                                                                   05/23/2018 20:54:11 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE DIG
OBJECT MODULE PLACED IN dig.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE dig.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include "dig.h"
   2          #include "ds1302.h"
   3          
   4          uchar code DIG_CODE[] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90};
   5          uchar dis_code[8], dis_flag = 0;
   6          
   7          extern uchar hour, min, sec, TIME[7], play, flash, index_hour, index_min, index_sec;
   8          extern uint volt, volt_h, volt_l;
   9          extern long uint fre, per;
  10          extern bit index;
  11          void dig_set()
  12          {       
  13   1              Read_Time();
  14   1              sec = TIME[0] / 16 * 10 + TIME[0] % 16;
  15   1              min = TIME[1] / 16 * 10 + TIME[1] % 16;
  16   1              hour = TIME[2] / 16 * 10 + TIME[2] % 16;        
  17   1      
  18   1              if(play == 0)
  19   1              {
  20   2                      dis_code[0] = DIG_CODE[hour / 10];
  21   2                      dis_code[1] = DIG_CODE[hour % 10];
  22   2                      dis_code[2] = 0xbf;
  23   2                      dis_code[3] = DIG_CODE[min / 10];
  24   2                      dis_code[4] = DIG_CODE[min % 10];
  25   2                      dis_code[5] = 0xbf;
  26   2                      dis_code[6] = DIG_CODE[sec / 10];
  27   2                      dis_code[7] = DIG_CODE[sec % 10];
  28   2      
  29   2                      if(sec%2)
  30   2                      {
  31   3                              if(flash)
  32   3                              {
  33   4                                      dis_code[3 * flash - 3] = 0xff;
  34   4                                      dis_code[3 * flash - 2] = 0xff; 
  35   4                              }
  36   3                      }
  37   2              }
  38   1              else if(play == 1)
  39   1              {
  40   2                      dis_code[0] = 0xbf;
  41   2                      dis_code[1] = DIG_CODE[1];
  42   2                      dis_code[2] = 0xbf;
  43   2                      dis_code[3] = 0xff;
  44   2                      dis_code[4] = DIG_CODE[volt / 1000];
  45   2                      dis_code[5] = DIG_CODE[volt % 1000 / 100];
  46   2                      dis_code[6] = DIG_CODE[volt % 100 / 10];
  47   2                      dis_code[7] = DIG_CODE[volt % 10];
  48   2              }
  49   1              else if(play == 2)
  50   1              {
  51   2                      dis_code[0] = DIG_CODE[volt_h / 1000];
  52   2                      dis_code[1] = DIG_CODE[volt_h % 1000 / 100];
  53   2                      dis_code[2] = DIG_CODE[volt_h % 100 / 10];
  54   2                      dis_code[3] = DIG_CODE[volt_h % 10];
  55   2                      dis_code[4] = DIG_CODE[volt_l / 1000];
C51 COMPILER V9.01   DIG                                                                   05/23/2018 20:54:11 PAGE 2   

  56   2                      dis_code[5] = DIG_CODE[volt_l % 1000 / 100];
  57   2                      dis_code[6] = DIG_CODE[volt_l % 100 / 10];
  58   2                      dis_code[7] = DIG_CODE[volt_l % 10];    
  59   2                      
  60   2                      if(sec%2)
  61   2                      {
  62   3                              switch(flash)
  63   3                              {
  64   4                                      case 1:
  65   4                                              dis_code[0] = 0xff;
  66   4                                              dis_code[1] = 0xff;
  67   4                                              dis_code[2] = 0xff;
  68   4                                              dis_code[3]     = 0xff;
  69   4                                      break;
  70   4                                      case 2:
  71   4                                              dis_code[4] = 0xff;
  72   4                                              dis_code[5] = 0xff;
  73   4                                              dis_code[6] = 0xff;
  74   4                                              dis_code[7] = 0xff;
  75   4                                      break;  
  76   4                              }       
  77   3                      }
  78   2              }
  79   1              else if(play == 3)
  80   1              {
  81   2                      dis_code[0] = 0xbf;
  82   2                      dis_code[1] = DIG_CODE[2];
  83   2                      dis_code[2] = 0xbf;
  84   2                      dis_code[3] = 0xff;
  85   2      
  86   2                      if(flash == 0)
  87   2                      {
  88   3                              dis_code[4] = DIG_CODE[fre / 1000];
  89   3                              dis_code[5] = DIG_CODE[fre % 1000 / 100];
  90   3                              dis_code[6] = DIG_CODE[fre % 100 / 10];
  91   3                              dis_code[7] = DIG_CODE[fre % 10];       
  92   3                      }       
  93   2                      else
  94   2                      {
  95   3                              dis_code[4] = DIG_CODE[per / 1000];
  96   3                              dis_code[5] = DIG_CODE[per % 1000 / 100];
  97   3                              dis_code[6] = DIG_CODE[per % 100 / 10];
  98   3                              dis_code[7] = DIG_CODE[per % 10];               
  99   3                      }
 100   2              }
 101   1              else if(play == 4)
 102   1              {
 103   2                      dis_code[0] = 0xff;
 104   2                      dis_code[1] = 0xff;
 105   2                      dis_code[2] = 0xff;
 106   2                      dis_code[3] = 0xff;
 107   2                      dis_code[4] = 0xff;
 108   2                      dis_code[5] = 0xff;
 109   2                      dis_code[6] = DIG_CODE[0];
 110   2                      dis_code[7] = DIG_CODE[index];  
 111   2              }
 112   1              else if(play == 5)
 113   1              {
 114   2                      dis_code[0] = DIG_CODE[index_hour / 10];
 115   2                      dis_code[1] = DIG_CODE[index_hour % 10];
 116   2                      dis_code[2] = 0xbf;
 117   2                      dis_code[3] = DIG_CODE[index_min / 10];
C51 COMPILER V9.01   DIG                                                                   05/23/2018 20:54:11 PAGE 3   

 118   2                      dis_code[4] = DIG_CODE[index_min % 10];
 119   2                      dis_code[5] = 0xbf;
 120   2                      dis_code[6] = DIG_CODE[index_sec / 10];
 121   2                      dis_code[7] = DIG_CODE[index_sec % 10];
 122   2              }
 123   1               
 124   1      
 125   1      }
 126          void display()
 127          {
 128   1              dig_set();
 129   1              P2 = P2 & 0x1f | 0xe0;
 130   1              P0 = 0xff;
 131   1              P2 &= 0x1f;
 132   1              P2 = P2 & 0x1f | 0xc0;
 133   1              P0 = 0x01<<dis_flag;
 134   1              P2 &= 0x1f;
 135   1              P2 = P2 & 0x1f | 0xe0;
 136   1              P0 = dis_code[dis_flag];
 137   1              P2 &= 0x1f;
 138   1      
 139   1              if(++dis_flag == 8)
 140   1                      dis_flag = 0;
 141   1      
 142   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1137    ----
   CONSTANT SIZE    =     10    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      9    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
